import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { createClient } from '@supabase/supabase-js';
import readline from 'readline';

// Configura√ß√£o do caminho para o arquivo .env
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '.env') });

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Erro: Vari√°veis de ambiente do Supabase n√£o encontradas.');
  process.exit(1);
}

// Cliente Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Interface para input do usu√°rio
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Lista de unidades para testar
const UNIDADES_PARA_TESTAR = [
  'unidade', 
  'caixa', 
  'kg', 
  'g', 
  'l', 
  'ml', 
  'metro', 
  'cm', 
  'pacote', 
  'par'
];

// Configura√ß√£o para testes de convers√£o entre unidades
const CONVERSOES_PARA_TESTAR = [
  { 
    nome: 'PESO (kg ‚Üî g)',
    produto: {
      nome: 'Produto Teste - Convers√£o de Peso',
      unidade: 'kg',
      quantidade_inicial: 10
    },
    testes: [
      { tipo: 'entrada', quantidade: 2, unidade: 'kg', equivalente: 2 },
      { tipo: 'entrada', quantidade: 500, unidade: 'g', equivalente: 0.5 },
      { tipo: 'saida', quantidade: 1.5, unidade: 'kg', equivalente: 1.5 },
      { tipo: 'saida', quantidade: 250, unidade: 'g', equivalente: 0.25 },
      // Testes complexos adicionais 
      { tipo: 'entrada', quantidade: 1000, unidade: 'g', equivalente: 1 },
      { tipo: 'saida', quantidade: 0.5, unidade: 'kg', equivalente: 0.5 },
      { tipo: 'entrada', quantidade: 750, unidade: 'g', equivalente: 0.75 },
      { tipo: 'saida', quantidade: 2000, unidade: 'g', equivalente: 2 }
    ]
  },
  { 
    nome: 'VOLUME (l ‚Üî ml)',
    produto: {
      nome: 'Produto Teste - Convers√£o de Volume',
      unidade: 'l',
      quantidade_inicial: 20
    },
    testes: [
      { tipo: 'entrada', quantidade: 5, unidade: 'l', equivalente: 5 },
      { tipo: 'entrada', quantidade: 750, unidade: 'ml', equivalente: 0.75 },
      { tipo: 'saida', quantidade: 2.5, unidade: 'l', equivalente: 2.5 },
      { tipo: 'saida', quantidade: 500, unidade: 'ml', equivalente: 0.5 },
      // Testes complexos adicionais
      { tipo: 'entrada', quantidade: 2500, unidade: 'ml', equivalente: 2.5 },
      { tipo: 'saida', quantidade: 0.25, unidade: 'l', equivalente: 0.25 },
      { tipo: 'entrada', quantidade: 1, unidade: 'l', equivalente: 1 },
      { tipo: 'saida', quantidade: 1250, unidade: 'ml', equivalente: 1.25 }
    ]
  },
  { 
    nome: 'COMPRIMENTO (m ‚Üî cm)',
    produto: {
      nome: 'Produto Teste - Convers√£o de Comprimento',
      unidade: 'm',
      quantidade_inicial: 50
    },
    testes: [
      { tipo: 'entrada', quantidade: 10, unidade: 'm', equivalente: 10 },
      { tipo: 'entrada', quantidade: 80, unidade: 'cm', equivalente: 0.8 },
      { tipo: 'saida', quantidade: 5, unidade: 'm', equivalente: 5 },
      { tipo: 'saida', quantidade: 60, unidade: 'cm', equivalente: 0.6 },
      // Testes complexos adicionais
      { tipo: 'entrada', quantidade: 250, unidade: 'cm', equivalente: 2.5 },
      { tipo: 'saida', quantidade: 1.75, unidade: 'm', equivalente: 1.75 },
      { tipo: 'entrada', quantidade: 2, unidade: 'm', equivalente: 2 },
      { tipo: 'saida', quantidade: 325, unidade: 'cm', equivalente: 3.25 }
    ]
  },
  // Teste adicional com produto em g
  { 
    nome: 'PESO INVERSO (g ‚Üî kg)',
    produto: {
      nome: 'Produto Teste - Convers√£o de Peso Inverso',
      unidade: 'g',
      quantidade_inicial: 5000
    },
    testes: [
      { tipo: 'entrada', quantidade: 2000, unidade: 'g', equivalente: 2000 },
      { tipo: 'entrada', quantidade: 1.5, unidade: 'kg', equivalente: 1500 },
      { tipo: 'saida', quantidade: 500, unidade: 'g', equivalente: 500 },
      { tipo: 'saida', quantidade: 0.75, unidade: 'kg', equivalente: 750 },
      { tipo: 'entrada', quantidade: 0.25, unidade: 'kg', equivalente: 250 },
      { tipo: 'saida', quantidade: 2, unidade: 'kg', equivalente: 2000 },
    ]
  },
  // Teste adicional com produto em ml
  { 
    nome: 'VOLUME INVERSO (ml ‚Üî l)',
    produto: {
      nome: 'Produto Teste - Convers√£o de Volume Inverso',
      unidade: 'ml',
      quantidade_inicial: 8000
    },
    testes: [
      { tipo: 'entrada', quantidade: 1500, unidade: 'ml', equivalente: 1500 },
      { tipo: 'entrada', quantidade: 2.5, unidade: 'l', equivalente: 2500 },
      { tipo: 'saida', quantidade: 800, unidade: 'ml', equivalente: 800 },
      { tipo: 'saida', quantidade: 1.2, unidade: 'l', equivalente: 1200 },
      { tipo: 'entrada', quantidade: 0.35, unidade: 'l', equivalente: 350 },
      { tipo: 'saida', quantidade: 3, unidade: 'l', equivalente: 3000 },
    ]
  },
  // Testes de compensa√ß√£o autom√°tica
  {
    nome: 'COMPENSA√á√ÉO - EXCLUS√ÉO (kg ‚Üî g)',
    produto: {
      nome: 'Produto Teste - Compensa√ß√£o por Exclus√£o',
      unidade: 'kg',
      quantidade_inicial: 20
    },
    testes: [
      { 
        tipo: 'entrada', 
        quantidade: 5, 
        unidade: 'kg', 
        equivalente: 5,
        testarExclusao: true   // Marcar para testar exclus√£o depois
      },
      { 
        tipo: 'entrada', 
        quantidade: 300, 
        unidade: 'g', 
        equivalente: 0.3
      },
      { 
        tipo: 'saida', 
        quantidade: 1.8, 
        unidade: 'kg', 
        equivalente: 1.8,
        testarExclusao: true   // Marcar para testar exclus√£o depois
      },
      { 
        tipo: 'saida', 
        quantidade: 400, 
        unidade: 'g', 
        equivalente: 0.4
      }
    ]
  },
  {
    nome: 'COMPENSA√á√ÉO - ATUALIZA√á√ÉO (l ‚Üî ml)',
    produto: {
      nome: 'Produto Teste - Compensa√ß√£o por Atualiza√ß√£o',
      unidade: 'l',
      quantidade_inicial: 30
    },
    testes: [
      { 
        tipo: 'entrada', 
        quantidade: 3.5, 
        unidade: 'l', 
        equivalente: 3.5,
        testarAtualizacao: {
          novaQuantidade: 2.8,
          novaUnidade: 'l',
          novoEquivalente: 2.8
        }
      },
      { 
        tipo: 'entrada', 
        quantidade: 750, 
        unidade: 'ml', 
        equivalente: 0.75,
        testarAtualizacao: {
          novaQuantidade: 1250,
          novaUnidade: 'ml',
          novoEquivalente: 1.25
        }
      },
      { 
        tipo: 'saida', 
        quantidade: 2, 
        unidade: 'l', 
        equivalente: 2,
        testarAtualizacao: {
          novaQuantidade: 1500,
          novaUnidade: 'ml',
          novoEquivalente: 1.5
        }
      },
      { 
        tipo: 'saida', 
        quantidade: 500, 
        unidade: 'ml', 
        equivalente: 0.5,
        testarAtualizacao: {
          novaQuantidade: 0.7,
          novaUnidade: 'l',
          novoEquivalente: 0.7
        }
      }
    ]
  },
  {
    nome: 'COMPENSA√á√ÉO - MISTA (m ‚Üî cm)',
    produto: {
      nome: 'Produto Teste - Compensa√ß√£o Mista',
      unidade: 'm',
      quantidade_inicial: 50
    },
    testes: [
      { 
        tipo: 'entrada', 
        quantidade: 8, 
        unidade: 'm', 
        equivalente: 8,
        testarExclusao: true
      },
      { 
        tipo: 'entrada', 
        quantidade: 350, 
        unidade: 'cm', 
        equivalente: 3.5,
        testarAtualizacao: {
          novaQuantidade: 450,
          novaUnidade: 'cm',
          novoEquivalente: 4.5
        }
      },
      { 
        tipo: 'saida', 
        quantidade: 6.2, 
        unidade: 'm', 
        equivalente: 6.2
      },
      { 
        tipo: 'saida', 
        quantidade: 75, 
        unidade: 'cm', 
        equivalente: 0.75,
        testarExclusao: true
      }
    ]
  }
];

// Fun√ß√µes de convers√£o de unidades
const converterUnidades = (valor, unidadeOrigem, unidadeDestino) => {
  // Caso sejam iguais, n√£o precisa converter
  if (unidadeOrigem === unidadeDestino) return valor;
  
  // Convers√µes de peso
  if (unidadeOrigem === 'g' && unidadeDestino === 'kg') return valor / 1000;
  if (unidadeOrigem === 'kg' && unidadeDestino === 'g') return valor * 1000;
  
  // Convers√µes de volume
  if (unidadeOrigem === 'ml' && unidadeDestino === 'l') return valor / 1000;
  if (unidadeOrigem === 'l' && unidadeDestino === 'ml') return valor * 1000;
  
  // Convers√µes de comprimento
  if (unidadeOrigem === 'cm' && unidadeDestino === 'm') return valor / 100;
  if (unidadeOrigem === 'm' && unidadeDestino === 'cm') return valor * 100;
  
  // Se n√£o encontrou uma convers√£o, retorna o valor original
  console.log(`‚ö†Ô∏è Convers√£o de ${unidadeOrigem} para ${unidadeDestino} n√£o suportada.`);
  return valor;
};

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

/**
 * Fun√ß√£o para esperar um determinado tempo
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Formata o nome da unidade para exibi√ß√£o
 */
function formatarUnidade(unidade) {
  const mapeamento = {
    'unidade': 'un.',
    'caixa': 'cx.',
    'kg': 'kg',
    'g': 'g',
    'l': 'L',
    'ml': 'mL',
    'metro': 'm',
    'cm': 'cm',
    'pacote': 'pct.',
    'par': 'par'
  };
  
  return mapeamento[unidade] || unidade;
}

/**
 * Teste do trigger para um produto com uma unidade espec√≠fica
 */
async function testarTriggerParaUnidade(unidade, categoryId, authData) {
  console.log(`\n\nüîç TESTANDO TRIGGER COM UNIDADE: ${unidade.toUpperCase()} (${formatarUnidade(unidade)})`);
  console.log('=======================================================');
  
  try {
    // Criar um produto de teste com a unidade espec√≠fica
    const productCode = `TESTE-${unidade.toUpperCase()}-${Date.now().toString().substring(6)}`;
    console.log(`üì¶ Criando produto de teste com unidade '${unidade}'...`);
    
    const { data: newProduct, error: newProductError } = await supabase
      .from('products')
      .insert({
        name: `Produto Teste - ${unidade.toUpperCase()}`,
        description: `Produto para teste do trigger com unidade ${unidade}`,
        code: productCode,
        quantity: 100, // Come√ßar com estoque suficiente para testes
        min_quantity: 10,
        unit: unidade,
        category_id: categoryId
      })
      .select();
    
    if (newProductError) {
      throw new Error(`Erro ao criar produto: ${newProductError.message}`);
    }
    
    const testProduct = newProduct[0];
    console.log(`‚úÖ Produto criado: ${testProduct.name} (C√≥digo: ${testProduct.code}, ID: ${testProduct.id})`);
    console.log(`üî¢ Quantidade inicial: ${testProduct.quantity} ${formatarUnidade(testProduct.unit)}`);
    
    // TESTE 1: Criar movimenta√ß√£o de entrada e verificar atualiza√ß√£o autom√°tica
    console.log('\nüîÑ TESTE 1: Criando movimenta√ß√£o de ENTRADA...');
    const entradaQtd = 50;
    
    const { data: entryMovement, error: entryError } = await supabase
      .from('movements')
      .insert({
        product_id: testProduct.id,
        type: 'entrada',
        quantity: entradaQtd,
        unit: unidade,
        notes: `Teste do trigger - entrada (${unidade})`
      })
      .select();
    
    if (entryError) {
      throw new Error(`Erro ao criar movimenta√ß√£o de entrada: ${entryError.message}`);
    }
    
    console.log(`‚úÖ Movimenta√ß√£o de entrada criada com sucesso! (ID: ${entryMovement[0].id})`);
    
    // Esperar um pouco para o trigger processar
    console.log('Aguardando processamento do trigger...');
    await sleep(300);
    
    // Verificar se o estoque foi atualizado automaticamente
    const { data: productAfterEntry, error: entryCheckError } = await supabase
      .from('products')
      .select('*')
      .eq('id', testProduct.id)
      .single();
      
    if (entryCheckError) {
      throw new Error(`Erro ao verificar produto ap√≥s entrada: ${entryCheckError.message}`);
    }
    
    const expectedQtyAfterEntry = testProduct.quantity + entradaQtd;
    console.log(`üìä Quantidade ap√≥s entrada: ${productAfterEntry.quantity} ${formatarUnidade(productAfterEntry.unit)}`);
    
    const successEntry = productAfterEntry.quantity === expectedQtyAfterEntry;
    if (successEntry) {
      console.log(`‚úÖ TRIGGER FUNCIONOU! Quantidade aumentou automaticamente ap√≥s entrada.`);
      console.log(`   Inicial: ${testProduct.quantity}, Adicionado: ${entradaQtd}, Final: ${productAfterEntry.quantity}`);
    } else {
      console.log(`‚ùå FALHA NO TRIGGER! Quantidade esperada: ${expectedQtyAfterEntry}, Atual: ${productAfterEntry.quantity}`);
    }
    
    // TESTE 2: Criar movimenta√ß√£o de sa√≠da e verificar atualiza√ß√£o autom√°tica
    console.log('\nüîÑ TESTE 2: Criando movimenta√ß√£o de SA√çDA...');
    const saidaQtd = 20;
    
    const { data: exitMovement, error: exitError } = await supabase
      .from('movements')
      .insert({
        product_id: testProduct.id,
        type: 'saida',
        quantity: saidaQtd,
        unit: unidade,
        notes: `Teste do trigger - sa√≠da (${unidade})`
      })
      .select();
    
    if (exitError) {
      throw new Error(`Erro ao criar movimenta√ß√£o de sa√≠da: ${exitError.message}`);
    }
    
    console.log(`‚úÖ Movimenta√ß√£o de sa√≠da criada com sucesso! (ID: ${exitMovement[0].id})`);
    
    // Esperar um pouco para o trigger processar
    console.log('Aguardando processamento do trigger...');
    await sleep(300);
    
    // Verificar se o estoque foi atualizado automaticamente
    const { data: productAfterExit, error: exitCheckError } = await supabase
      .from('products')
      .select('*')
      .eq('id', testProduct.id)
      .single();
      
    if (exitCheckError) {
      throw new Error(`Erro ao verificar produto ap√≥s sa√≠da: ${exitCheckError.message}`);
    }
    
    console.log(`üìä Quantidade ap√≥s sa√≠da: ${productAfterExit.quantity} ${formatarUnidade(productAfterExit.unit)}`);
    
    const expectedQtyAfterExit = productAfterEntry.quantity - saidaQtd;
    const successExit = productAfterExit.quantity === expectedQtyAfterExit;
    
    if (successExit) {
      console.log(`‚úÖ TRIGGER FUNCIONOU! Quantidade diminuiu automaticamente ap√≥s sa√≠da.`);
      console.log(`   Anterior: ${productAfterEntry.quantity}, Subtra√≠do: ${saidaQtd}, Final: ${productAfterExit.quantity}`);
    } else {
      console.log(`‚ùå FALHA NO TRIGGER! Quantidade esperada: ${expectedQtyAfterExit}, Atual: ${productAfterExit.quantity}`);
    }
    
    // Resultado do teste para esta unidade
    console.log(`\nüìã RESULTADO PARA UNIDADE ${unidade.toUpperCase()}:`);
    console.log(`‚úÖ Teste de entrada: ${successEntry ? 'PASSOU' : 'FALHOU'}`);
    console.log(`‚úÖ Teste de sa√≠da: ${successExit ? 'PASSOU' : 'FALHOU'}`);
    
    const allPassed = successEntry && successExit;
    if (allPassed) {
      console.log(`‚úÖ O trigger est√° funcionando corretamente para a unidade ${unidade.toUpperCase()}!`);
    } else {
      console.log(`‚ùå Falhas detectadas para a unidade ${unidade.toUpperCase()}!`);
    }
    
    return {
      unidade,
      successEntry,
      successExit,
      allPassed
    };
    
  } catch (error) {
    console.error(`\n‚ùå ERRO DURANTE O TESTE DE ${unidade.toUpperCase()}:`, error.message);
    return {
      unidade,
      successEntry: false,
      successExit: false,
      allPassed: false,
      error: error.message
    };
  }
}

/**
 * Teste do trigger para convers√µes entre unidades de medida
 */
async function testarConversaoUnidades(conversao, categoryId, authData) {
  console.log(`\n\nüîç TESTANDO CONVERS√ÉO: ${conversao.nome}`);
  console.log('=======================================================');
  
  try {
    // Criar um produto de teste com a unidade base
    const productCode = `TESTE-CONV-${Date.now().toString().substring(6)}`;
    const prodConfig = conversao.produto;
    
    console.log(`üì¶ Criando produto de teste com unidade '${prodConfig.unidade}'...`);
    
    const { data: newProduct, error: newProductError } = await supabase
      .from('products')
      .insert({
        name: prodConfig.nome,
        description: `Produto para teste de convers√£o de unidades`,
        code: productCode,
        quantity: prodConfig.quantidade_inicial,
        min_quantity: 1,
        unit: prodConfig.unidade,
        category_id: categoryId
      })
      .select();
    
    if (newProductError) {
      throw new Error(`Erro ao criar produto: ${newProductError.message}`);
    }
    
    const testProduct = newProduct[0];
    console.log(`‚úÖ Produto criado: ${testProduct.name} (C√≥digo: ${testProduct.code}, ID: ${testProduct.id})`);
    console.log(`üî¢ Quantidade inicial: ${testProduct.quantity} ${formatarUnidade(testProduct.unit)}`);
    
    let quantidadeAtual = testProduct.quantity;
    let testesPassados = 0;
    const totalTestes = conversao.testes.length;
    
    // Executar cada teste de convers√£o
    for (let i = 0; i < conversao.testes.length; i++) {
      const teste = conversao.testes[i];
      const tipoTexto = teste.tipo === 'entrada' ? 'ENTRADA' : 'SA√çDA';
      const operadorTexto = teste.tipo === 'entrada' ? '+' : '-';
      
      console.log(`\nüîÑ TESTE ${i+1}: ${tipoTexto} de ${teste.quantidade} ${formatarUnidade(teste.unidade)}`);
      
      // Registrar movimenta√ß√£o
      const { data: movement, error: movementError } = await supabase
        .from('movements')
        .insert({
          product_id: testProduct.id,
          type: teste.tipo,
          quantity: teste.quantidade,
          unit: teste.unidade,
          notes: `Teste de convers√£o - ${teste.unidade} para ${testProduct.unit}`
        })
        .select();
      
      if (movementError) {
        throw new Error(`Erro ao criar movimenta√ß√£o: ${movementError.message}`);
      }
      
      console.log(`‚úÖ Movimenta√ß√£o criada com sucesso! (ID: ${movement[0].id})`);
      
      // Esperar um pouco para o trigger processar
      console.log('Aguardando processamento do trigger...');
      await sleep(300);
      
      // Verificar se o estoque foi atualizado automaticamente e corretamente
      const { data: productAfterMovement, error: checkError } = await supabase
        .from('products')
        .select('*')
        .eq('id', testProduct.id)
        .single();
        
      if (checkError) {
        throw new Error(`Erro ao verificar produto ap√≥s movimenta√ß√£o: ${checkError.message}`);
      }
      
      // Calcular a quantidade esperada ap√≥s a convers√£o
      const variacao = teste.tipo === 'entrada' ? teste.equivalente : -teste.equivalente;
      const expectedQty = quantidadeAtual + variacao;
      
      console.log(`üìä Quantidade ap√≥s ${tipoTexto}: ${productAfterMovement.quantity} ${formatarUnidade(productAfterMovement.unit)}`);
      console.log(`üìù C√°lculo: ${quantidadeAtual} ${operadorTexto} ${teste.equivalente} = ${expectedQty}`);
      
      // Verificar com uma toler√¢ncia para n√∫meros de ponto flutuante
      const tolerance = 0.0001;
      const diff = Math.abs(productAfterMovement.quantity - expectedQty);
      const success = diff < tolerance;
      
      if (success) {
        console.log(`‚úÖ CONVERS√ÉO CORRETA! O trigger aplicou a convers√£o de unidades adequadamente.`);
        testesPassados++;
      } else {
        console.log(`‚ùå FALHA NA CONVERS√ÉO! Esperada: ${expectedQty}, Atual: ${productAfterMovement.quantity}`);
        console.log(`   Diferen√ßa: ${diff} (toler√¢ncia: ${tolerance})`);
      }
      
      // Atualizar a quantidade atual para o pr√≥ximo teste
      quantidadeAtual = productAfterMovement.quantity;
    }
    
    // Resultado dos testes para esta convers√£o
    console.log(`\nüìã RESULTADO PARA CONVERS√ÉO ${conversao.nome}:`);
    console.log(`‚úÖ Testes passados: ${testesPassados}/${totalTestes}`);
    
    const allPassed = testesPassados === totalTestes;
    if (allPassed) {
      console.log(`‚úÖ As convers√µes de unidades est√£o funcionando corretamente!`);
    } else {
      console.log(`‚ùå Algumas convers√µes de unidades falharam. Verifique os detalhes acima.`);
    }
    
    return {
      nome: conversao.nome,
      testesPassados,
      totalTestes,
      allPassed
    };
    
  } catch (error) {
    console.error(`\n‚ùå ERRO DURANTE O TESTE DE CONVERS√ÉO ${conversao.nome}:`, error.message);
    return {
      nome: conversao.nome,
      testesPassados: 0,
      totalTestes: conversao.testes.length,
      allPassed: false,
      error: error.message
    };
  }
}

/**
 * Teste do trigger para compensa√ß√µes de altera√ß√µes (update e delete)
 */
async function testarCompensacaoUnidades(conversao, categoryId, authData) {
  console.log(`\n\nüîç TESTANDO COMPENSA√á√ïES: ${conversao.nome}`);
  console.log('=======================================================');
  
  try {
    // Criar um produto de teste com a unidade base, similar ao testarConversaoUnidades
    const productCode = `TESTE-COMP-${Date.now().toString().substring(6)}`;
    const prodConfig = conversao.produto;
    
    console.log(`üì¶ Criando produto de teste com unidade '${prodConfig.unidade}'...`);
    
    const { data: newProduct, error: newProductError } = await supabase
      .from('products')
      .insert({
        name: prodConfig.nome,
        description: `Produto para teste de compensa√ß√µes`,
        code: productCode,
        quantity: prodConfig.quantidade_inicial,
        min_quantity: 1,
        unit: prodConfig.unidade,
        category_id: categoryId
      })
      .select();
    
    if (newProductError) {
      throw new Error(`Erro ao criar produto: ${newProductError.message}`);
    }
    
    const testProduct = newProduct[0];
    console.log(`‚úÖ Produto criado: ${testProduct.name} (C√≥digo: ${testProduct.code}, ID: ${testProduct.id})`);
    console.log(`üî¢ Quantidade inicial: ${testProduct.quantity} ${formatarUnidade(testProduct.unit)}`);
    
    let quantidadeAtual = testProduct.quantity;
    let testesPassados = 0;
    let totalTestes = 0;
    const movimentacoesParaCompensar = [];
    
    // Fase 1: Criar movimenta√ß√µes
    console.log(`\nüìù FASE 1: CRIA√á√ÉO DE MOVIMENTA√á√ïES`);
    
    for (let i = 0; i < conversao.testes.length; i++) {
      const teste = conversao.testes[i];
      const tipoTexto = teste.tipo === 'entrada' ? 'ENTRADA' : 'SA√çDA';
      const operadorTexto = teste.tipo === 'entrada' ? '+' : '-';
      
      console.log(`\nüîÑ MOVIMENTA√á√ÉO ${i+1}: ${tipoTexto} de ${teste.quantidade} ${formatarUnidade(teste.unidade)}`);
      
      // Registrar movimenta√ß√£o
      const { data: movement, error: movementError } = await supabase
        .from('movements')
        .insert({
          product_id: testProduct.id,
          type: teste.tipo,
          quantity: teste.quantidade,
          unit: teste.unidade,
          notes: `Teste de compensa√ß√£o - ${teste.unidade} para ${testProduct.unit}`
        })
        .select();
      
      if (movementError) {
        throw new Error(`Erro ao criar movimenta√ß√£o: ${movementError.message}`);
      }
      
      console.log(`‚úÖ Movimenta√ß√£o criada com sucesso! (ID: ${movement[0].id})`);
      
      // Guardar movimento para teste de compensa√ß√£o posterior
      if (teste.testarExclusao || teste.testarAtualizacao) {
        movimentacoesParaCompensar.push({
          id: movement[0].id,
          teste: teste,
          indice: i
        });
      }
      
      // Esperar um pouco para o trigger processar
      console.log('Aguardando processamento do trigger...');
      await sleep(300);
      
      // Verificar se o estoque foi atualizado automaticamente e corretamente
      const { data: productAfterMovement, error: checkError } = await supabase
        .from('products')
        .select('*')
        .eq('id', testProduct.id)
        .single();
        
      if (checkError) {
        throw new Error(`Erro ao verificar produto ap√≥s movimenta√ß√£o: ${checkError.message}`);
      }
      
      // Calcular a quantidade esperada ap√≥s a convers√£o
      const variacao = teste.tipo === 'entrada' ? teste.equivalente : -teste.equivalente;
      const expectedQty = quantidadeAtual + variacao;
      
      console.log(`üìä Quantidade ap√≥s ${tipoTexto}: ${productAfterMovement.quantity} ${formatarUnidade(productAfterMovement.unit)}`);
      console.log(`üìù C√°lculo: ${quantidadeAtual} ${operadorTexto} ${teste.equivalente} = ${expectedQty}`);
      
      // Verificar com uma toler√¢ncia para n√∫meros de ponto flutuante
      const tolerance = 0.0001;
      const diff = Math.abs(productAfterMovement.quantity - expectedQty);
      const success = diff < tolerance;
      
      if (success) {
        console.log(`‚úÖ REGISTRADO CORRETAMENTE! O trigger aplicou a convers√£o de unidades adequadamente.`);
        testesPassados++;
      } else {
        console.log(`‚ùå FALHA NO REGISTRO! Esperada: ${expectedQty}, Atual: ${productAfterMovement.quantity}`);
        console.log(`   Diferen√ßa: ${diff} (toler√¢ncia: ${tolerance})`);
      }
      
      totalTestes++;
      
      // Atualizar a quantidade atual para o pr√≥ximo teste
      quantidadeAtual = productAfterMovement.quantity;
    }
    
    // Fase 2: Testar compensa√ß√µes (exclus√µes e atualiza√ß√µes)
    if (movimentacoesParaCompensar.length > 0) {
      console.log(`\nüìù FASE 2: TESTANDO COMPENSA√á√ïES`);
      
      for (const movimentacao of movimentacoesParaCompensar) {
        const teste = movimentacao.teste;
        const tipoTexto = teste.tipo === 'entrada' ? 'ENTRADA' : 'SA√çDA';
        const operadorTexto = teste.tipo === 'entrada' ? '-' : '+'; // Operador inverso para compensa√ß√£o
        
        // Testar exclus√£o de movimento
        if (teste.testarExclusao) {
          console.log(`\nüîÑ EXCLUS√ÉO DA MOVIMENTA√á√ÉO ${movimentacao.indice + 1}: ${tipoTexto} de ${teste.quantidade} ${formatarUnidade(teste.unidade)}`);
          
          // Excluir a movimenta√ß√£o
          const { error: deleteError } = await supabase
            .from('movements')
            .delete()
            .eq('id', movimentacao.id);
          
          if (deleteError) {
            throw new Error(`Erro ao excluir movimenta√ß√£o: ${deleteError.message}`);
          }
          
          console.log(`‚úÖ Movimenta√ß√£o exclu√≠da com sucesso! (ID: ${movimentacao.id})`);
          
          // Esperar um pouco para o trigger processar
          console.log('Aguardando processamento do trigger...');
          await sleep(300);
          
          // Verificar se o estoque foi compensado corretamente
          const { data: productAfterDelete, error: checkError } = await supabase
            .from('products')
            .select('*')
            .eq('id', testProduct.id)
            .single();
            
          if (checkError) {
            throw new Error(`Erro ao verificar produto ap√≥s exclus√£o: ${checkError.message}`);
          }
          
          // Calcular a quantidade esperada ap√≥s a compensa√ß√£o (reverter a movimenta√ß√£o)
          const variacao = teste.tipo === 'entrada' ? -teste.equivalente : teste.equivalente;
          const expectedQty = quantidadeAtual + variacao;
          
          console.log(`üìä Quantidade ap√≥s EXCLUS√ÉO: ${productAfterDelete.quantity} ${formatarUnidade(productAfterDelete.unit)}`);
          console.log(`üìù C√°lculo: ${quantidadeAtual} ${operadorTexto} ${teste.equivalente} = ${expectedQty}`);
          
          // Verificar com uma toler√¢ncia para n√∫meros de ponto flutuante
          const tolerance = 0.0001;
          const diff = Math.abs(productAfterDelete.quantity - expectedQty);
          const success = diff < tolerance;
          
          if (success) {
            console.log(`‚úÖ COMPENSA√á√ÉO CORRETA! O trigger reverteu a quantidade adequadamente ap√≥s a exclus√£o.`);
            testesPassados++;
          } else {
            console.log(`‚ùå FALHA NA COMPENSA√á√ÉO! Esperada: ${expectedQty}, Atual: ${productAfterDelete.quantity}`);
            console.log(`   Diferen√ßa: ${diff} (toler√¢ncia: ${tolerance})`);
          }
          
          totalTestes++;
          
          // Atualizar a quantidade atual para o pr√≥ximo teste
          quantidadeAtual = productAfterDelete.quantity;
        }
        
        // Testar atualiza√ß√£o de movimento
        if (teste.testarAtualizacao) {
          const atualizacao = teste.testarAtualizacao;
          console.log(`\nüîÑ ATUALIZA√á√ÉO DA MOVIMENTA√á√ÉO ${movimentacao.indice + 1}: ${tipoTexto} de ${teste.quantidade} ${formatarUnidade(teste.unidade)} -> ${atualizacao.novaQuantidade} ${formatarUnidade(atualizacao.novaUnidade)}`);
          
          // Atualizar a movimenta√ß√£o
          const { error: updateError } = await supabase
            .from('movements')
            .update({
              quantity: atualizacao.novaQuantidade,
              unit: atualizacao.novaUnidade
            })
            .eq('id', movimentacao.id);
          
          if (updateError) {
            throw new Error(`Erro ao atualizar movimenta√ß√£o: ${updateError.message}`);
          }
          
          console.log(`‚úÖ Movimenta√ß√£o atualizada com sucesso! (ID: ${movimentacao.id})`);
          
          // Esperar um pouco para o trigger processar
          console.log('Aguardando processamento do trigger...');
          await sleep(300);
          
          // Verificar se o estoque foi compensado corretamente
          const { data: productAfterUpdate, error: checkError } = await supabase
            .from('products')
            .select('*')
            .eq('id', testProduct.id)
            .single();
            
          if (checkError) {
            throw new Error(`Erro ao verificar produto ap√≥s atualiza√ß√£o: ${checkError.message}`);
          }
          
          // Calcular a quantidade esperada ap√≥s a compensa√ß√£o
          // Primeiro reverte o movimento original, depois aplica o novo
          const revertOriginal = teste.tipo === 'entrada' ? -teste.equivalente : teste.equivalente;
          const aplicarNovo = teste.tipo === 'entrada' ? atualizacao.novoEquivalente : -atualizacao.novoEquivalente;
          const expectedQty = quantidadeAtual + revertOriginal + aplicarNovo;
          
          console.log(`üìä Quantidade ap√≥s ATUALIZA√á√ÉO: ${productAfterUpdate.quantity} ${formatarUnidade(productAfterUpdate.unit)}`);
          console.log(`üìù C√°lculo: ${quantidadeAtual} + (${revertOriginal}) + (${aplicarNovo}) = ${expectedQty}`);
          
          // Verificar com uma toler√¢ncia para n√∫meros de ponto flutuante
          const tolerance = 0.0001;
          const diff = Math.abs(productAfterUpdate.quantity - expectedQty);
          const success = diff < tolerance;
          
          if (success) {
            console.log(`‚úÖ COMPENSA√á√ÉO CORRETA! O trigger ajustou a quantidade adequadamente ap√≥s a atualiza√ß√£o.`);
            testesPassados++;
          } else {
            console.log(`‚ùå FALHA NA COMPENSA√á√ÉO! Esperada: ${expectedQty}, Atual: ${productAfterUpdate.quantity}`);
            console.log(`   Diferen√ßa: ${diff} (toler√¢ncia: ${tolerance})`);
          }
          
          totalTestes++;
          
          // Atualizar a quantidade atual para o pr√≥ximo teste
          quantidadeAtual = productAfterUpdate.quantity;
        }
      }
    }
    
    // Fase 3: Testar marca√ß√£o como deleted (soft delete)
    if (movimentacoesParaCompensar.length > 0) {
      console.log(`\nüìù FASE 3: TESTANDO SOFT DELETE (DELETED = TRUE)`);
      
      // Obter movimenta√ß√µes n√£o exclu√≠das
      const { data: activeMovements, error: queryError } = await supabase
        .from('movements')
        .select('*')
        .eq('product_id', testProduct.id)
        .is('deleted', null);
      
      if (queryError) {
        throw new Error(`Erro ao consultar movimenta√ß√µes ativas: ${queryError.message}`);
      }
      
      if (activeMovements && activeMovements.length > 0) {
        // Testar com o primeiro movimento ativo encontrado
        const movimento = activeMovements[0];
        const tipoTexto = movimento.type === 'entrada' ? 'ENTRADA' : 'SA√çDA';
        const operadorTexto = movimento.type === 'entrada' ? '-' : '+'; // Operador inverso para compensa√ß√£o
        
        console.log(`\nüîÑ SOFT DELETE (DELETED=TRUE) DA MOVIMENTA√á√ÉO: ${tipoTexto} de ${movimento.quantity} ${formatarUnidade(movimento.unit || testProduct.unit)}`);
        
        // Calcular o equivalente no produto
        let equivalente = movimento.quantity;
        if (movimento.unit && movimento.unit !== testProduct.unit) {
          // Simulando a convers√£o que o trigger far√°
          equivalente = converterUnidades(movimento.quantity, movimento.unit, testProduct.unit);
        }
        
        // Marcar como deleted
        const { error: updateError } = await supabase
          .from('movements')
          .update({
            deleted: true
          })
          .eq('id', movimento.id);
        
        if (updateError) {
          throw new Error(`Erro ao marcar movimenta√ß√£o como deleted: ${updateError.message}`);
        }
        
        console.log(`‚úÖ Movimenta√ß√£o marcada como deleted com sucesso! (ID: ${movimento.id})`);
        
        // Esperar um pouco para o trigger processar
        console.log('Aguardando processamento do trigger...');
        await sleep(300);
        
        // Verificar se o estoque foi compensado corretamente
        const { data: productAfterDelete, error: checkError } = await supabase
          .from('products')
          .select('*')
          .eq('id', testProduct.id)
          .single();
          
        if (checkError) {
          throw new Error(`Erro ao verificar produto ap√≥s soft delete: ${checkError.message}`);
        }
        
        // Calcular a quantidade esperada ap√≥s a compensa√ß√£o (reverter a movimenta√ß√£o)
        const variacao = movimento.type === 'entrada' ? -equivalente : equivalente;
        const expectedQty = quantidadeAtual + variacao;
        
        console.log(`üìä Quantidade ap√≥s SOFT DELETE: ${productAfterDelete.quantity} ${formatarUnidade(productAfterDelete.unit)}`);
        console.log(`üìù C√°lculo: ${quantidadeAtual} ${operadorTexto} ${equivalente} = ${expectedQty}`);
        
        // Verificar com uma toler√¢ncia para n√∫meros de ponto flutuante
        const tolerance = 0.0001;
        const diff = Math.abs(productAfterDelete.quantity - expectedQty);
        const success = diff < tolerance;
        
        if (success) {
          console.log(`‚úÖ COMPENSA√á√ÉO CORRETA! O trigger reverteu a quantidade adequadamente ap√≥s o soft delete.`);
          testesPassados++;
        } else {
          console.log(`‚ùå FALHA NA COMPENSA√á√ÉO! Esperada: ${expectedQty}, Atual: ${productAfterDelete.quantity}`);
          console.log(`   Diferen√ßa: ${diff} (toler√¢ncia: ${tolerance})`);
        }
        
        totalTestes++;
      } else {
        console.log(`‚ö†Ô∏è Nenhuma movimenta√ß√£o ativa encontrada para testar soft delete.`);
      }
    }
    
    // Resultado dos testes para esta compensa√ß√£o
    console.log(`\nüìã RESULTADO PARA COMPENSA√á√ïES ${conversao.nome}:`);
    console.log(`‚úÖ Testes passados: ${testesPassados}/${totalTestes}`);
    
    const allPassed = testesPassados === totalTestes;
    if (allPassed) {
      console.log(`‚úÖ Todas as compensa√ß√µes est√£o funcionando corretamente!`);
    } else {
      console.log(`‚ùå Algumas compensa√ß√µes falharam. Verifique os detalhes acima.`);
    }
    
    return {
      nome: conversao.nome,
      testesPassados,
      totalTestes,
      allPassed
    };
    
  } catch (error) {
    console.error(`\n‚ùå ERRO DURANTE O TESTE DE COMPENSA√á√ÉO ${conversao.nome}:`, error.message);
    return {
      nome: conversao.nome,
      testesPassados: 0,
      totalTestes: 0,
      allPassed: false,
      error: error.message
    };
  }
}

/**
 * Testa o trigger de atualiza√ß√£o autom√°tica de estoque para todas as unidades e convers√µes
 */
async function testarTriggerEstoqueTodasUnidades() {
  console.log('üß™ TESTE DO TRIGGER DE ATUALIZA√á√ÉO AUTOM√ÅTICA DE ESTOQUE');
  console.log('=======================================================');
  
  try {
    // Autentica√ß√£o
    console.log('\nüîë AUTENTICA√á√ÉO NO SISTEMA...');
    
    // Pedir credenciais ao usu√°rio
    const email = await promptUser("Digite seu email: ");
    const password = await promptUser("Digite sua senha: ");
    
    console.log('\nRealizando login...');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    
    if (authError) {
      throw new Error(`Erro ao fazer login: ${authError.message}`);
    }
    
    console.log('‚úÖ Login realizado com sucesso!');
    console.log(`üìä Usu√°rio: ${authData.user.email}`);

    // Verificar se existe categoria para teste
    console.log('\nüìÇ Verificando categorias...');
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('*')
      .limit(1);
    
    if (categoriesError) {
      throw new Error(`Erro ao consultar categorias: ${categoriesError.message}`);
    }
    
    let categoryId;
    
    if (categories.length === 0) {
      // Criar categoria se n√£o existir
      const { data: newCategory, error: newCategoryError } = await supabase
        .from('categories')
        .insert({
          name: 'Categoria Testes',
          description: 'Categoria para testes automatizados'
        })
        .select();
      
      if (newCategoryError) {
        throw new Error(`Erro ao criar categoria: ${newCategoryError.message}`);
      }
      
      categoryId = newCategory[0].id;
      console.log(`‚úÖ Categoria criada: ${newCategory[0].name} (ID: ${categoryId})`);
    } else {
      categoryId = categories[0].id;
      console.log(`‚úÖ Usando categoria existente: ${categories[0].name} (ID: ${categoryId})`);
    }
    
    // Escolher o tipo de teste
    console.log('\nüìù ESCOLHA O TIPO DE TESTE:');
    console.log('1. Testar unidades individuais');
    console.log('2. Testar convers√µes entre unidades (kg ‚Üî g, l ‚Üî ml, m ‚Üî cm)');
    console.log('3. Testar compensa√ß√µes (exclus√£o e atualiza√ß√£o de movimenta√ß√µes)');
    console.log('4. Testar tudo');
    
    const tipoTeste = await promptUser("Escolha uma op√ß√£o (1/2/3/4, padr√£o: 2): ");
    
    const testarUnidades = ['1', '4'].includes(tipoTeste);
    const testarConversoes = ['2', '4'].includes(tipoTeste) || !tipoTeste || tipoTeste === '';
    const testarCompensacoes = ['3', '4'].includes(tipoTeste);
    
    const resultadosUnidades = [];
    const resultadosConversoes = [];
    const resultadosCompensacoes = [];
    
    // === TESTES DE UNIDADES INDIVIDUAIS ===
    if (testarUnidades) {
      console.log(`\nüîÑ Iniciando testes para ${UNIDADES_PARA_TESTAR.length} unidades diferentes...`);
      
      // Perguntar quais unidades testar
      const resposta = await promptUser("Testar todas as unidades? (S/N, padr√£o: N, testar apenas unidade): ");
      
      let unidadesParaTestar = ['unidade']; // Padr√£o: testar apenas unidade
      
      if (resposta.toUpperCase() === 'S') {
        unidadesParaTestar = UNIDADES_PARA_TESTAR;
      } else {
        // Permitir escolher uma unidade espec√≠fica
        const escolhaUnidade = await promptUser(`Escolha uma unidade para testar ${UNIDADES_PARA_TESTAR.join(', ')}: `);
        if (UNIDADES_PARA_TESTAR.includes(escolhaUnidade)) {
          unidadesParaTestar = [escolhaUnidade];
        }
      }
      
      for (const unidade of unidadesParaTestar) {
        const resultado = await testarTriggerParaUnidade(unidade, categoryId, authData);
        resultadosUnidades.push(resultado);
      }
    }
    
    // === TESTES DE CONVERS√ÉO ENTRE UNIDADES ===
    if (testarConversoes) {
      console.log(`\nüîÑ Iniciando testes de convers√£o entre unidades...`);
      
      for (const conversao of CONVERSOES_PARA_TESTAR) {
        const resultado = await testarConversaoUnidades(conversao, categoryId, authData);
        resultadosConversoes.push(resultado);
      }
    }
    
    // === TESTES DE COMPENSA√á√ÉO ===
    if (testarCompensacoes) {
      console.log(`\nüîÑ Iniciando testes de compensa√ß√£o de movimenta√ß√µes...`);
      
      // Testar apenas as convers√µes que t√™m op√ß√µes de compensa√ß√£o
      const compensacoesParaTestar = CONVERSOES_PARA_TESTAR.filter(c => 
        c.nome.startsWith('COMPENSA√á√ÉO')
      );
      
      for (const compensacao of compensacoesParaTestar) {
        const resultado = await testarCompensacaoUnidades(compensacao, categoryId, authData);
        resultadosCompensacoes.push(resultado);
      }
    }
    
    // === RELAT√ìRIO FINAL ===
    console.log('\n\nüìä RELAT√ìRIO FINAL DOS TESTES:');
    console.log('=======================================================');
    
    // Relat√≥rio de unidades individuais
    if (testarUnidades && resultadosUnidades.length > 0) {
      console.log('\nüìã RESULTADO DOS TESTES DE UNIDADES INDIVIDUAIS:');
      
      for (const resultado of resultadosUnidades) {
        const status = resultado.allPassed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
        console.log(`${status} - ${resultado.unidade.toUpperCase()} (${formatarUnidade(resultado.unidade)})`);
        
        if (!resultado.allPassed && resultado.error) {
          console.log(`   Erro: ${resultado.error}`);
        }
      }
      
      const totalPassouUnidades = resultadosUnidades.filter(r => r.allPassed).length;
      console.log(`\n‚úÖ Total de unidades testadas com sucesso: ${totalPassouUnidades}/${resultadosUnidades.length}`);
    }
    
    // Relat√≥rio de convers√µes entre unidades
    if (testarConversoes && resultadosConversoes.length > 0) {
      console.log('\nüìã RESULTADO DOS TESTES DE CONVERS√ÉO ENTRE UNIDADES:');
      
      for (const resultado of resultadosConversoes) {
        const status = resultado.allPassed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
        console.log(`${status} - ${resultado.nome}: ${resultado.testesPassados}/${resultado.totalTestes} testes`);
        
        if (!resultado.allPassed && resultado.error) {
          console.log(`   Erro: ${resultado.error}`);
        }
      }
      
      const totalPassouConversoes = resultadosConversoes.filter(r => r.allPassed).length;
      console.log(`\n‚úÖ Total de convers√µes testadas com sucesso: ${totalPassouConversoes}/${resultadosConversoes.length}`);
    }
    
    // Relat√≥rio de compensa√ß√µes
    if (testarCompensacoes && resultadosCompensacoes.length > 0) {
      console.log('\nüìã RESULTADO DOS TESTES DE COMPENSA√á√ÉO:');
      
      for (const resultado of resultadosCompensacoes) {
        const status = resultado.allPassed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
        console.log(`${status} - ${resultado.nome}: ${resultado.testesPassados}/${resultado.totalTestes} testes`);
        
        if (!resultado.allPassed && resultado.error) {
          console.log(`   Erro: ${resultado.error}`);
        }
      }
      
      const totalPassouCompensacoes = resultadosCompensacoes.filter(r => r.allPassed).length;
      console.log(`\n‚úÖ Total de compensa√ß√µes testadas com sucesso: ${totalPassouCompensacoes}/${resultadosCompensacoes.length}`);
    }
    
    // Resultado global
    const todosUnidadesPassaram = resultadosUnidades.every(r => r.allPassed);
    const todosConversoesPassaram = resultadosConversoes.every(r => r.allPassed);
    const todosCompensacoesPassaram = resultadosCompensacoes.every(r => r.allPassed);
    const todosPassaram = 
      (testarUnidades ? todosUnidadesPassaram : true) && 
      (testarConversoes ? todosConversoesPassaram : true) &&
      (testarCompensacoes ? todosCompensacoesPassaram : true);
    
    console.log('\n=======================================================');
    if (todosPassaram) {
      console.log('üéâ TODOS OS TESTES PASSARAM! O trigger est√° funcionando corretamente!');
      if (testarUnidades) {
        console.log('‚úÖ A atualiza√ß√£o autom√°tica de estoque funciona para todas as unidades testadas.');
      }
      if (testarConversoes) {
        console.log('‚úÖ As convers√µes entre unidades est√£o funcionando corretamente.');
      }
      if (testarCompensacoes) {
        console.log('‚úÖ As compensa√ß√µes autom√°ticas (exclus√£o e atualiza√ß√£o) est√£o funcionando corretamente.');
      }
    } else {
      console.log('‚ö†Ô∏è ALGUNS TESTES FALHARAM! Verifique os detalhes acima.');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERRO DURANTE OS TESTES:', error.message);
  } finally {
    rl.close();
  }
}

// Executar os testes
testarTriggerEstoqueTodasUnidades(); 
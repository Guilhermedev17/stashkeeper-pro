[33mcommit 498c5dd5312cc05e9bb54519157d067706a21664[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m
Author: Guilherme Santos <guissantos50@gmail.com>
Date:   Mon Apr 7 21:30:00 2025 -0300

    Corrigir valida√ß√£o de estoque para mililitros e gramas sem arredondamento

[1mdiff --git a/src/components/products/MeasurementUnitUtils.ts b/src/components/products/MeasurementUnitUtils.ts[m
[1mindex 3b47ca1..915016b 100644[m
[1m--- a/src/components/products/MeasurementUnitUtils.ts[m
[1m+++ b/src/components/products/MeasurementUnitUtils.ts[m
[36m@@ -90,7 +90,7 @@[m [mexport const normalizeQuantityForComparison = ([m
   [m
   // Se as unidades s√£o iguais, n√£o √© necess√°rio converter[m
   if (fromUnitNormalized === toUnitNormalized || fromUnit === 'default') {[m
[31m-      return Number(value.toFixed(3)); // Limitar a 3 casas decimais[m
[32m+[m[32m      return value; // Removido o arredondamento para 3 casas decimais[m
   }[m
   [m
   let convertedValue;[m
[36m@@ -119,8 +119,8 @@[m [mexport const normalizeQuantityForComparison = ([m
       convertedValue = value;[m
   }[m
   [m
[31m-  // Limitar a 3 casas decimais para evitar problemas de precis√£o[m
[31m-  return Number(convertedValue.toFixed(3));[m
[32m+[m[32m  // Removido o arredondamento para 3 casas decimais[m
[32m+[m[32m  return convertedValue;[m
 };[m
 [m
 /**[m
[36m@@ -145,8 +145,8 @@[m [mexport const validateStock = ([m
   );[m
 [m
   // Verifica√ß√£o simplificada - comparamos sempre na unidade base do produto[m
[31m-  // Toler√¢ncia de 0.01 para evitar problemas de precis√£o com decimais[m
[31m-  if (convertedQuantity > (productQuantity + 0.01)) {[m
[32m+[m[32m  // Removida a toler√¢ncia de 0.01, pois n√£o estamos mais arredondando valores[m
[32m+[m[32m  if (convertedQuantity > productQuantity) {[m
       return {[m
           valid: false,[m
           message: 'Quantidade n√£o pode ser maior que o estoque dispon√≠vel'[m
[36m@@ -202,8 +202,8 @@[m [mexport const getUnitInstruction = (unit: string): string | null => {[m
 [m
 /**[m
  * Formata um n√∫mero de acordo com a unidade[m
[31m- * - Para ml e g: exibe n√∫meros inteiros (sem decimais)[m
[31m- * - Para l e kg: exibe com at√© 3 casas decimais (remove zeros desnecess√°rios)[m
[32m+[m[32m * - Para ml e g: exibe sem arredondamento (n√£o arredonda para inteiros)[m
[32m+[m[32m * - Para l e kg: exibe sem arredondamento, mantendo o valor exato[m
  * - Para outras unidades: mant√©m o formato padr√£o com 2 casas decimais[m
  * [m
  * @param value O valor a ser formatado[m
[36m@@ -213,15 +213,14 @@[m [mexport const getUnitInstruction = (unit: string): string | null => {[m
 export const formatNumberByUnit = (value: number, unit: string): string => {[m
   const normalizedUnit = normalizeUnit(unit);[m
   [m
[31m-  // Para ml e g, mostra n√∫meros inteiros[m
[32m+[m[32m  // Para ml e g, n√£o arredonda mais para inteiros[m
   if (normalizedUnit === 'ml' || normalizedUnit === 'g') {[m
[31m-    return Math.round(value).toString();[m
[32m+[m[32m    return value.toString();[m
   }[m
   [m
[31m-  // Para l e kg, mostra at√© 3 casas decimais (remove zeros desnecess√°rios)[m
[32m+[m[32m  // Para l e kg, mostra o valor exato sem limitar casas decimais[m
   if (normalizedUnit === 'l' || normalizedUnit === 'kg') {[m
[31m-    // Limita a 3 casas decimais e remove zeros no final[m
[31m-    return parseFloat(value.toFixed(3)).toString().replace('.', ',');[m
[32m+[m[32m    return value.toString().replace('.', ',');[m
   }[m
   [m
   // Para outras unidades[m
[1mdiff --git a/src/components/products/ModernMovementDialog.tsx b/src/components/products/ModernMovementDialog.tsx[m
[1mindex aafb181..8e7c3cf 100644[m
[1m--- a/src/components/products/ModernMovementDialog.tsx[m
[1m+++ b/src/components/products/ModernMovementDialog.tsx[m
[36m@@ -239,8 +239,8 @@[m [mconst convertQuantityBetweenUnits = ([m
     }[m
     [m
     console.log(`FINAL: Convertido ${value} na unidade ${fromUnitType} para ${result} na unidade ${toUnitType}`);[m
[31m-    // Limitar a 3 casas decimais para evitar problemas de precis√£o[m
[31m-    return Number(result.toFixed(3));[m
[32m+[m[32m    // Removido arredondamento para 3 casas decimais[m
[32m+[m[32m    return result;[m
 };[m
 [m
 /**[m
[36m@@ -383,9 +383,8 @@[m [mexport function ModernMovementDialog({[m
         const parsedValue = parseFloat(numericValue);[m
         [m
         if (!isNaN(parsedValue)) {[m
[31m-            // Limitar a 3 casas decimais para evitar problemas de compara√ß√£o[m
[31m-            const roundedValue = Number(parsedValue.toFixed(3));[m
[31m-            form.setValue('quantity', roundedValue);[m
[32m+[m[32m            // N√£o limitar mais a 3 casas decimais[m
[32m+[m[32m            form.setValue('quantity', parsedValue);[m
         } else {[m
             form.setValue('quantity', null);[m
         }[m
[36m@@ -445,7 +444,7 @@[m [mexport function ModernMovementDialog({[m
 [m
         try {[m
             // Converter o valor inserido para a unidade base do produto, se necess√°rio[m
[31m-            let finalQuantity = Number(parsedValue.toFixed(3)); // Limitar a 3 casas decimais[m
[32m+[m[32m            let finalQuantity = parsedValue;[m
             [m
             if (form.watch('unitType') !== 'default') {[m
                 // Unidade selecionada no formul√°rio[m

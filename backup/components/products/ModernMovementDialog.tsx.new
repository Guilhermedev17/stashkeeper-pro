// Modificar as funções relevantes no ModernMovementDialog.tsx para trabalhar com inteiros
// Apenas os trechos que precisam ser alterados:

// Função para converter quantidades entre unidades
const convertQuantityBetweenUnits = (
    value: number, 
    fromUnitType: string, 
    toUnitType: string, 
    conversionFactor: number
): number => {
    // Se as unidades são iguais ou já estamos na unidade padrão, não há conversão necessária
    if (fromUnitType === toUnitType || fromUnitType === 'default') {
        console.log(`Sem conversão: ${value} (unidades iguais ou padrão)`);
        return value; // Manter o valor original sem arredondamento
    }
    
    let result = value;
    const fromUnitNormalized = normalizeUnit(fromUnitType);
    const toUnitNormalized = normalizeUnit(toUnitType);
    
    // Conversão para volume (L e ml)
    if (fromUnitNormalized === 'ml' && toUnitNormalized === 'l') {
        result = value * CONVERSION_FACTORS.ML_TO_LITERS;
        console.log(`Convertendo de ml para L: ${value} ml = ${result} L`);
    } 
    else if (fromUnitNormalized === 'l' && toUnitNormalized === 'ml') {
        result = value * CONVERSION_FACTORS.LITERS_TO_ML;
        console.log(`Convertendo de L para ml: ${value} L = ${result} ml`);
        
        // Para ml, usar inteiro apenas para exibição, mas manter precisão para cálculos
        if (value === Math.floor(value)) {
            // Se o valor original for inteiro, o resultado em ml também será inteiro exato
            result = Math.round(result);
        }
    }
    // Conversão para peso (kg e g)
    else if (fromUnitNormalized === 'g' && toUnitNormalized === 'kg') {
        result = value * CONVERSION_FACTORS.GRAMS_TO_KG;
        console.log(`Convertendo de g para kg: ${value} g = ${result} kg`);
    }
    else if (fromUnitNormalized === 'kg' && toUnitNormalized === 'g') {
        result = value * CONVERSION_FACTORS.KG_TO_GRAMS;
        console.log(`Convertendo de kg para g: ${value} kg = ${result} g`);
        
        // Para g, usar inteiro apenas para exibição, mas manter precisão para cálculos
        if (value === Math.floor(value)) {
            // Se o valor original for inteiro, o resultado em g também será inteiro exato
            result = Math.round(result);
        }
    }
    // Caso genérico usando o fator de conversão fornecido
    else {
        if (conversionFactor > 1) {
            result = value / conversionFactor;
            console.log(`Conversão genérica (divisão): ${value} / ${conversionFactor} = ${result}`);
        } else {
            result = value * (1 / conversionFactor);
            console.log(`Conversão genérica (multiplicação): ${value} * (1/${conversionFactor}) = ${result}`);
        }
    }
    
    console.log(`FINAL: Convertido ${value} na unidade ${fromUnitType} para ${result} na unidade ${toUnitType}`);
    return result; // Não arredondar para preservar precisão
};

// Função para lidar com mudanças no input de quantidade
const handleQuantityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    
    // Permitir apenas números, vírgula e ponto como separador decimal
    const isValidInput = /^[\d.,]*$/.test(value);
    if (!isValidInput && value !== '') return;
    
    setQuantityInput(value);
    
    // Atualizar o valor no formulário, convertendo para número se possível
    const numericValue = value.replace(',', '.');
    const parsedValue = parseFloat(numericValue);
    
    if (!isNaN(parsedValue)) {
        // Definir o valor no formulário, mantendo a precisão original
        form.setValue('quantity', parsedValue);
        
        // Para ml e g, exibir como inteiro apenas na interface, mas manter valor preciso internamente
        const selectedUnit = form.watch('unitType') === 'default' 
            ? (product ? product.unit : '') 
            : form.watch('unitType');
            
        // Não alteramos o valor interno, apenas a exibição na UI se necessário
    } else {
        form.setValue('quantity', null);
    }
};

// Para o onSubmit, modificar o trecho relevante
// Se chegou aqui, o valor é válido
form.clearErrors('quantity');

// Obter os valores do formulário e adicionar a quantidade manualmente
const finalValues = {
    ...values,
    quantity: parsedValue
};

setIsSubmitting(true);

try {
    // Converter o valor inserido para a unidade base do produto, se necessário
    let finalQuantity = parsedValue;
    
    if (form.watch('unitType') !== 'default') {
        // Converter para unidade do produto para armazenar com precisão exata
        finalQuantity = convertQuantityBetweenUnits(
            finalQuantity,
            form.watch('unitType'),
            product.unit,
            1 // fator de conversão padrão
        );
    }
} catch (error) {
    console.error('Erro ao converter quantidade:', error);
    setIsSubmitting(false);
} 